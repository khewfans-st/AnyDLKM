#!/system/bin/sh
#
# Script to provide r/w access to read-only vendor_dlkm
# (f2fs), resize partition and replace LKM.
#
# ####################################################
# Credits:
# ####################################################
# A simple Samsung services disabler by Ian Macdonald.
#
# Use this to prime your device after installing TWRP.
# ####################################################
# ak3-core.sh
# osm0sis @ xda-developers
# ####################################################
# afaneh92 @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";

# set up working directory variables
[ "$ADLKMHOME" ] || ADLKMHOME=/tmp/anydlkm;
[ "$ANDROID_ROOT" ] || ANDROID_ROOT=/system;
$ADLKMTMP=$ADLKMHOME/tmp

### output/testing functions:
# ui_print "<text>" [...]
ui_print() {
  until [ ! "$1" ]; do
    echo "ui_print $1
      ui_print" >> /proc/self/fd/$OUTFD;
    shift;
  done;
}

# abort ["<text>" [...]]
abort() {
  ui_print " " "$@";
  cleanup
  exit 1;
}

cleanup() {
  cd $(dirname $ADLKMHOME);
  rm -rf $ADLKMHOME;
}

md5() {
  md5sum -b "$1"
}

file_changed() {
  local file="$1"
  local old_md5="$2"
  local new_md5=$( md5 "$file" )

  if [ $new_md5 != $old_md5 ]; then
    ui_print " -     ...modified."
  else
    ui_print " -     ...unchanged."
  fi
}

resize_vendor_dlkm() {
  local dm_block_ext4=$(df -t ext4 | grep "/vendor_dlkm" | cut -DF1)
  local dm_block_f2fs=$(df -t f2fs | grep "/vendor_dlkm" | cut -DF1)

  if [ "$dm_block_ext4" ]; then
    ui_print " - Unmounting /vendor_dlkm..."
    umount /vendor_dlkm
    ui_print " - Checking vendor_dlkm block partition before resizing..."
    e2fsck -f $dm_block_ext4
    ui_print " - Resizing the filesystem on $dm_block_ext4..."
    resize2fs $dm_block_ext4
    ui_print " - Make the partition R/W by unsharing its blocks..."
    e2fsck -E unshare_blocks $dm_block_ext4
  elif [ "$dm_block_f2fs" ]; then
    vendor_dlkm_size_mb=$(du -sm /vendor_dlkm | cut -f1)
    new_vendor_dlkm_size_mb=`echo $vendor_dlkm_size_mb \* 4.00 |bc`
    new_vendor_dlkm_size_mb=${new_vendor_dlkm_size_mb%.*}
    uuid=$(toybox blkid $dm_block_f2fs | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}' -o)
    ui_print " - Create R/W vendor_dlkm image...${new_vendor_dlkm_size_mb}M"
    truncate -s ${new_vendor_dlkm_size_mb}M $ADLKMTMP/vendor_dlkm-rw.img
    make_f2fs -g android -O project_quota,extra_attr,inode_checksum,sb_checksum,compression,flexible_inline_xattr,verity,inode_crtime -U $uuid -f -l vendor_dlkm $ADLKMTMP/vendor_dlkm-rw.img
    mkdir -p $ADLKMTMP/vendor_dlkm-rw
    mount $ADLKMTMP/vendor_dlkm-rw.img $ADLKMTMP/vendor_dlkm-rw
    ui_print " - Copy old R/O vendor_dlkm file to our new created..."
    cp -a --preserve=all /vendor_dlkm/* $ADLKMTMP/vendor_dlkm-rw 
    umount $ADLKMTMP/vendor_dlkm-rw
    umount /vendor_dlkm
    # ui_print " - Checking vendor_dlkm image before flashing..."
    # fsck.f2fs -f $ADLKMTMP/vendor_dlkm-rw.img
    # ui_print " - Dynamic partition resizing using lptools"
    # lptools resize vendor_dlkm $(wc -c < $ADLKMTMP/vendor_dlkm-rw.img)
    # lptools unmap vendor_dlkm
    # lptools map vendor_dlkm
    # ui_print " - Write our new R/W vendor_dlkm image, Please wait..."
    # dd if=$ADLKMTMP/vendor_dlkm-rw.img of=/dev/block/bootdevice/by-name/vendor_dlkm
  fi
  ui_print " - Remounting /vendor_dlkm..."
  mount /vendor_dlkm
  mount -o remount,rw /vendor_dlkm
}

vendor_dlkm_free_size_check() {
  if dd if=/dev/zero of=/vendor_dlkm/test bs=1 count=1 2>/dev/null; then
    ui_print " -     ...succeeded."
    rm -f /vendor_dlkm/test
  else
    ui_print " - Checking vendor_dlkm free size..."
    ui_print " -     ...No free space left on vendor_dlkm, attempting to vendor_dlkm vendor..."
    ui_print " "
    rm -f /vendor_dlkm/test
    resize_vendor_dlkm
  fi
}

copy_dlkm() {
    cp $ADLKMHOME/modules/*.ko /vendor_dlkm/lib/modules
}


ui_print " "
ui_print "Replace DLKM for Samsung devices"
ui_print "by fansin"
ui_print " "
ui_print "Originated from"
ui_print "Multi-disabler for Samsung devices"
ui_print "running Android 9 or later."
ui_print "by Ian Macdonald, enhanced by afaneh92"
ui_print " "

os=$(getprop ro.build.version.release)
major=${os%%.*}
bl=$(getprop ro.boot.bootloader)
dp=$(getprop ro.boot.dynamic_partitions)

# Firmware version starts at either 8th or 9th character, depending on length
# of bootloader string (12 or 13).
#
fw=${bl:$((${#bl} - 4)):4}

# Device is first 5 characters of bootloader string.
#
device=${bl:0:$((${#bl} - 8))}
mft=$(getprop ro.product.manufacturer | tr '[A-Z]' '[a-z]')

if [ "$mft" != samsung ]; then
  ui_print " - Device appears not to be made by Samsung."
  fatal=true
elif [ -z "$device" ]; then
  ui_print " - Could not determine device model."
  fatal=true
# elif [ $major -lt 9 ]; then
elif [ $major -lt 12 ]; then
  ui_print " - This software is incompatible with Android $major."
  fatal=true
fi
if [ -n "$fatal" ]; then
  abort " - Installation aborted."
fi

ui_print " - Detected a $device device with a $fw bootloader."
ui_print " - The environment appears to be Android $major."
ui_print " "

cleanup;
mkdir -p $ADLKMHOME/tmp;
cd $ADLKMHOME;
unzip -o "$ZIPFILE";
if [ $? != 0 -o ! "$(ls modules)" ]; then
  abort "Unzip failed. Aborting...";
fi;

ui_print " - Mounting $ANDROID_ROOT..."
mount $ANDROID_ROOT 2>/dev/null
mount -o remount,rw $ANDROID_ROOT 2>/dev/null

if ! mount | grep $ANDROID_ROOT >/dev/null; then
  ANDROID_ROOT=/system_root
  ui_print " -   Attempt failed. Mounting at $ANDROID_ROOT..."
  mount -o rw $ANDROID_ROOT
  if ! mount | grep $ANDROID_ROOT >/dev/null; then
    abort " -   Even that attempt failed. Aborting..."
  fi
fi

ui_print " - Mounting /vendor_dlkm..."
mount /vendor_dlkm
mount -o remount,rw /vendor_dlkm

if ! mount | grep /vendor_dlkm >/dev/null; then
  abort " -   Mount failed. Aborting..."
fi

resize_vendor_dlkm
# vendor_dlkm_free_size_check
# copy_ko

ui_print " - Unmounting /vendor_dlkm..."
umount /vendor_dlkm
ui_print " - Unmounting $ANDROID_ROOT..."
umount $ANDROID_ROOT


ui_print " "
ui_print " - Finished."
ui_print " "
